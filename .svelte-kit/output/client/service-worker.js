const e=location.pathname.split("/").slice(0,-1).join("/"),p=[e+"/_app/immutable/entry/app.CFlEdSGa.js",e+"/_app/immutable/nodes/0.CnMHjvl_.js",e+"/_app/immutable/assets/0.CjD-y2zz.css",e+"/_app/immutable/nodes/1.Cxc_P3yD.js",e+"/_app/immutable/nodes/2.CDG-WLHU.js",e+"/_app/immutable/chunks/disclose-version.BQodWu-7.js",e+"/_app/immutable/chunks/entry.BaBff65H.js",e+"/_app/immutable/chunks/proxy.CHWnTM2O.js",e+"/_app/immutable/chunks/render.CdcTL54P.js",e+"/_app/immutable/chunks/runtime.CrKm5I-o.js",e+"/_app/immutable/chunks/store.BecIhhb0.js",e+"/_app/immutable/entry/start.DaAtb17u.js"],u=[e+"/favicon.png"],l="1734318841320",i=`cache-${l}`,r=[...p,...u];self.addEventListener("install",s=>{async function n(){await(await caches.open(i)).addAll(r)}s.waitUntil(n())});self.addEventListener("activate",s=>{async function n(){for(const t of await caches.keys())t!==i&&await caches.delete(t)}s.waitUntil(n())});self.addEventListener("fetch",s=>{if(s.request.method!=="GET")return;async function n(){const t=new URL(s.request.url),c=await caches.open(i);if(r.includes(t.pathname)){const a=await c.match(t.pathname);if(a)return a}try{const a=await fetch(s.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&c.put(s.request,a.clone()),a}catch(a){const o=await c.match(s.request);if(o)return o;throw a}}s.respondWith(n())});
