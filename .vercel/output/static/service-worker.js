const a=location.pathname.split("/").slice(0,-1).join("/"),p=[a+"/_app/immutable/entry/app.BO7K_N9O.js",a+"/_app/immutable/nodes/0.T1qxDmDl.js",a+"/_app/immutable/assets/0.DKRXwWD3.css",a+"/_app/immutable/assets/rubik-dirt-cyrillic-ext-400-normal.DO6vxSgd.woff2",a+"/_app/immutable/assets/rubik-dirt-cyrillic-ext-400-normal.DSGhuBOL.woff",a+"/_app/immutable/assets/rubik-dirt-cyrillic-400-normal.BqBZGTeO.woff2",a+"/_app/immutable/assets/rubik-dirt-cyrillic-400-normal.DFUdszkb.woff",a+"/_app/immutable/assets/rubik-dirt-hebrew-400-normal.DoyVZlv6.woff2",a+"/_app/immutable/assets/rubik-dirt-hebrew-400-normal.DJlX3MV5.woff",a+"/_app/immutable/assets/rubik-dirt-latin-ext-400-normal.DWGQEn_A.woff2",a+"/_app/immutable/assets/rubik-dirt-latin-ext-400-normal.Bl44gCxU.woff",a+"/_app/immutable/assets/rubik-dirt-latin-400-normal.DR0aN1S6.woff2",a+"/_app/immutable/assets/rubik-dirt-latin-400-normal.CfDhD0M4.woff",a+"/_app/immutable/nodes/1.DOdU7H-a.js",a+"/_app/immutable/nodes/2.Djb48cqi.js",a+"/_app/immutable/nodes/3.qMESiTAY.js",a+"/_app/immutable/nodes/4.B5EFO1nC.js",a+"/_app/immutable/chunks/attributes.DgXluJxb.js",a+"/_app/immutable/chunks/disclose-version.Bg9kRutz.js",a+"/_app/immutable/chunks/entry.CrynaSAt.js",a+"/_app/immutable/chunks/if.ChpqNVhO.js",a+"/_app/immutable/chunks/legacy.sAiOJNJj.js",a+"/_app/immutable/chunks/props.BwDTEM8d.js",a+"/_app/immutable/chunks/runtime.bXq9IHA8.js",a+"/_app/immutable/chunks/store.BgTw70yS.js",a+"/_app/immutable/chunks/stores.BwtkxtAF.js",a+"/_app/immutable/chunks/workout-card.CmvNe6Aw.js",a+"/_app/immutable/entry/start.U72gTnzs.js"],c=[a+"/favicon.png"],o="1734634545592",r=`cache-${o}`,m=[...p,...c];self.addEventListener("install",t=>{async function i(){await(await caches.open(r)).addAll(m)}t.waitUntil(i())});self.addEventListener("activate",t=>{async function i(){for(const e of await caches.keys())e!==r&&await caches.delete(e)}t.waitUntil(i())});self.addEventListener("fetch",t=>{if(t.request.method!=="GET")return;async function i(){const e=new URL(t.request.url),n=await caches.open(r);if(m.includes(e.pathname)){const s=await n.match(e.pathname);if(s)return s}try{const s=await fetch(t.request);if(!(s instanceof Response))throw new Error("invalid response from fetch");return s.status===200&&n.put(t.request,s.clone()),s}catch(s){const l=await n.match(t.request);if(l)return l;throw s}}t.respondWith(i())});
