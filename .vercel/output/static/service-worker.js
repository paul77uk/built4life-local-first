const a=location.pathname.split("/").slice(0,-1).join("/"),c=[a+"/_app/immutable/entry/app.Ctq3oT7Z.js",a+"/_app/immutable/nodes/0.Dv5gZIUM.js",a+"/_app/immutable/assets/0.DKRXwWD3.css",a+"/_app/immutable/assets/rubik-dirt-cyrillic-ext-400-normal.DO6vxSgd.woff2",a+"/_app/immutable/assets/rubik-dirt-cyrillic-ext-400-normal.DSGhuBOL.woff",a+"/_app/immutable/assets/rubik-dirt-cyrillic-400-normal.BqBZGTeO.woff2",a+"/_app/immutable/assets/rubik-dirt-cyrillic-400-normal.DFUdszkb.woff",a+"/_app/immutable/assets/rubik-dirt-hebrew-400-normal.DoyVZlv6.woff2",a+"/_app/immutable/assets/rubik-dirt-hebrew-400-normal.DJlX3MV5.woff",a+"/_app/immutable/assets/rubik-dirt-latin-ext-400-normal.DWGQEn_A.woff2",a+"/_app/immutable/assets/rubik-dirt-latin-ext-400-normal.Bl44gCxU.woff",a+"/_app/immutable/assets/rubik-dirt-latin-400-normal.DR0aN1S6.woff2",a+"/_app/immutable/assets/rubik-dirt-latin-400-normal.CfDhD0M4.woff",a+"/_app/immutable/nodes/1.cPNX1P8U.js",a+"/_app/immutable/nodes/2.1D2wsHaM.js",a+"/_app/immutable/nodes/3.VtGS_prq.js",a+"/_app/immutable/nodes/4.JEoJ2rSz.js",a+"/_app/immutable/chunks/attributes.DgXluJxb.js",a+"/_app/immutable/chunks/disclose-version.Bg9kRutz.js",a+"/_app/immutable/chunks/entry.C-c44tds.js",a+"/_app/immutable/chunks/if.ChpqNVhO.js",a+"/_app/immutable/chunks/legacy.sAiOJNJj.js",a+"/_app/immutable/chunks/props.BwDTEM8d.js",a+"/_app/immutable/chunks/runtime.bXq9IHA8.js",a+"/_app/immutable/chunks/store.BgTw70yS.js",a+"/_app/immutable/chunks/stores.C4HWECWS.js",a+"/_app/immutable/chunks/workout-card.BIbdGpgB.js",a+"/_app/immutable/entry/start.D6zqEyzn.js"],o=[a+"/favicon.png"],m="1734634211826",r=`cache-${m}`,p=[...c,...o];self.addEventListener("install",s=>{async function i(){await(await caches.open(r)).addAll(p)}s.waitUntil(i())});self.addEventListener("activate",s=>{async function i(){for(const e of await caches.keys())e!==r&&await caches.delete(e)}s.waitUntil(i())});self.addEventListener("fetch",s=>{if(s.request.method!=="GET")return;async function i(){const e=new URL(s.request.url),n=await caches.open(r);if(p.includes(e.pathname)){const t=await n.match(e.pathname);if(t)return t}try{const t=await fetch(s.request);if(!(t instanceof Response))throw new Error("invalid response from fetch");return t.status===200&&n.put(s.request,t.clone()),t}catch(t){const l=await n.match(s.request);if(l)return l;throw t}}s.respondWith(i())});
